/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WhishList as PrismaWhishList,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class WhishListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WhishListCountArgs, "select">
  ): Promise<number> {
    return this.prisma.whishList.count(args);
  }

  async whishLists(
    args: Prisma.WhishListFindManyArgs
  ): Promise<PrismaWhishList[]> {
    return this.prisma.whishList.findMany(args);
  }
  async whishList(
    args: Prisma.WhishListFindUniqueArgs
  ): Promise<PrismaWhishList | null> {
    return this.prisma.whishList.findUnique(args);
  }
  async createWhishList(
    args: Prisma.WhishListCreateArgs
  ): Promise<PrismaWhishList> {
    return this.prisma.whishList.create(args);
  }
  async updateWhishList(
    args: Prisma.WhishListUpdateArgs
  ): Promise<PrismaWhishList> {
    return this.prisma.whishList.update(args);
  }
  async deleteWhishList(
    args: Prisma.WhishListDeleteArgs
  ): Promise<PrismaWhishList> {
    return this.prisma.whishList.delete(args);
  }

  async getListing(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.whishList
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.whishList
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
