/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WhishList } from "./WhishList";
import { WhishListCountArgs } from "./WhishListCountArgs";
import { WhishListFindManyArgs } from "./WhishListFindManyArgs";
import { WhishListFindUniqueArgs } from "./WhishListFindUniqueArgs";
import { CreateWhishListArgs } from "./CreateWhishListArgs";
import { UpdateWhishListArgs } from "./UpdateWhishListArgs";
import { DeleteWhishListArgs } from "./DeleteWhishListArgs";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { WhishListService } from "../whishList.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WhishList)
export class WhishListResolverBase {
  constructor(
    protected readonly service: WhishListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "read",
    possession: "any",
  })
  async _whishListsMeta(
    @graphql.Args() args: WhishListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WhishList])
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "read",
    possession: "any",
  })
  async whishLists(
    @graphql.Args() args: WhishListFindManyArgs
  ): Promise<WhishList[]> {
    return this.service.whishLists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WhishList, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "read",
    possession: "own",
  })
  async whishList(
    @graphql.Args() args: WhishListFindUniqueArgs
  ): Promise<WhishList | null> {
    const result = await this.service.whishList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WhishList)
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "create",
    possession: "any",
  })
  async createWhishList(
    @graphql.Args() args: CreateWhishListArgs
  ): Promise<WhishList> {
    return await this.service.createWhishList({
      ...args,
      data: {
        ...args.data,

        listing: {
          connect: args.data.listing,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WhishList)
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "update",
    possession: "any",
  })
  async updateWhishList(
    @graphql.Args() args: UpdateWhishListArgs
  ): Promise<WhishList | null> {
    try {
      return await this.service.updateWhishList({
        ...args,
        data: {
          ...args.data,

          listing: {
            connect: args.data.listing,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WhishList)
  @nestAccessControl.UseRoles({
    resource: "WhishList",
    action: "delete",
    possession: "any",
  })
  async deleteWhishList(
    @graphql.Args() args: DeleteWhishListArgs
  ): Promise<WhishList | null> {
    try {
      return await this.service.deleteWhishList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  @nestAccessControl.UseRoles({
    resource: "Listing",
    action: "read",
    possession: "any",
  })
  async getListing(
    @graphql.Parent() parent: WhishList
  ): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: WhishList): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
